    // unsigned int GDT_BASE_ADRESS = 0;
    // unsigned int GDT_SIZE = 24; // Because i

    // unsigned int gdt[1];
    // GET_GDT_DESC_ADRESS(gdt);
    // GDT_BASE_ADRESS = gdt[0] >> (16); // little trick
    //  hexToStr(GDT_BASE_ADRESS, str);


    void GET_GDT_DESC_ADRESS(byte *destAdress)
{
    asm volatile(
        "sgdt %0"
        : "=m"(*destAdress)
        :
        : "memory"

    );
}

// VGA CONSTANTS

// Text mode 0x02

#define VIDEO_TEXT_MEMORY_START 0xb8000

#define PIXEL_HEIGHT 25
#define TEXT_WIDTH 80

#define BLACK_BG 0x0f

// MODE 0X13
#define SCREEN_ADRESS 0xA0000 // The begging of the screen buffer in Graphics mode, 64KB

#define PIXEL_HEIGHT 200
#define PIXEL_WIDTH 320

void GRAPHICS_INIT(char *dataSector);

int CLEAR_VIDEO_MEMORY();

void PRINT_STR(char *string, int size);

// Prints a hexdump from the adress given until the length
// truncated if the length is bigger than the screen can handle
void PRINT_MEMORY_DUMP(char *adress, int length);

void printCharacterToPosition(char c, int x, int y);







sh ./clear.sh

nasm -f bin Bootloader/boot.asm -o Bootloader/bin/Bootloader.bin -I Bootloader/


#there is a better way to do it
#gcc -m32 -ffreestanding -fno-pie -c Kernel/kernel.c -o Kernel/Object/kernel.o 
#gcc -m32 -ffreestanding -fno-pie -c Kernel/UTILS.c -o Kernel/Object/UTILS.o 
for file in Kernel/source/*;do
    filename=$(basename $file) 
    gcc -m32 -ffreestanding -fno-pie -c Kernel/source/$filename -o  Kernel/object/${filename%.*}.o
done

ld  -m elf_i386 -o Kernel/bin/kernel.bin -Ttext 0x7e00 Kernel/object/* --oformat binary #Ttext is where the code is put INTO THE DISK ECTOR,
#it uses this value to calculate funcion calls and offsets, since there is no dynamic alocation, only code

dd if=/dev/zero of=iso/rawIso.img bs=512 count=5760
dd if=Bootloader/bin/Bootloader.bin of=iso/rawIso.img seek=0 count=1 conv=notrunc
dd if=Kernel/bin/kernel.bin of=iso/rawIso.img seek=1 count=16 conv=notrunc #careful for not loading all of kernel, write more if the kernal starts getting bigger,
#each sector is 512 bytes

genisoimage -quiet -V 'MYOS' -input-charset iso8859-1 -o iso/myos.iso -b rawIso.img -hide rawIso.img iso/



#hd -v iso/rawIso.img > isoDump.txt dump of iso image
#ndisasm -b 32 iso/rawIso.img > PCK.dis Dissassamble of the iso image
qemu-system-i386 -cdrom iso/myos.iso